import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv
from aiohttp import web

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_URL")  # https://your-project.railway.app
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = int(os.getenv("PORT", 8000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
events = [
    {
        "id": "mars2028",
        "title": "üöÄ –ú–∞—Å–∫ –ø–æ–ª–µ—Ç–∏—Ç –Ω–∞ –ú–∞—Ä—Å –¥–æ 2028 –≥–æ–¥–∞",
        "desc": "–°–¥–µ–ª–∞–µ—Ç –ª–∏ –ò–ª–ª–æ–Ω –ú–∞—Å–∫ –ø–∏–ª–æ—Ç–∏—Ä—É–µ–º—É—é –º–∏—Å—Å–∏—é –Ω–∞ –ú–∞—Ä—Å –¥–æ –∫–æ–Ω—Ü–∞ 2027 –≥–æ–¥–∞?",
    },
    {
        "id": "war2026",
        "title": "üí• –ê–º–µ—Ä–∏–∫–∞ –≤—Å—Ç—É–ø–∏—Ç –≤ –≤–æ–π–Ω—É —Å –ò—Ä–∞–Ω–æ–º –≤ 2026 –≥–æ–¥—É",
        "desc": "–ü—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ª–∏ –≤–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –°–®–ê –∏ –ò—Ä–∞–Ω–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–≤–∞ –≥–æ–¥–∞?",
    },
    {
        "id": "ai2027",
        "title": "ü§ñ –ò–ò –∑–∞—Ö–≤–∞—Ç–∏—Ç –º–∏—Ä –≤ 2027 –≥–æ–¥—É",
        "desc": "–°—Ç–∞–Ω–µ—Ç –ª–∏ –ò–ò –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —Å–∏–ª–æ–π, –∑–∞–º–µ–Ω—è—é—â–µ–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –±–∏–∑–Ω–µ—Å?",
    },
]

# –ö–Ω–æ–ø–∫–∏
start_keyboard = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton(
        text="üß† –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
        web_app=WebAppInfo(url="https://funny-biscuit-ccf218.netlify.app")
    ),
    InlineKeyboardButton(
        text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è",
        callback_data="show_events"
    )
)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–°—Ç–∞–≤—å –Ω–∞ –ë—É–¥—É—â–µ–µ*!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        parse_mode="Markdown",
        reply_markup=start_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "show_events")
async def show_events(callback_query: types.CallbackQuery):
    for event in events:
        keyboard = InlineKeyboardMarkup(row_width=3)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"vote:{event['id']}:yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"vote:{event['id']}:no"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"more:{event['id']}")
        )
        await bot.send_message(
            callback_query.from_user.id,
            f"*{event['title']}*\n{event['desc']}",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith("vote:"))
async def handle_vote(callback_query: types.CallbackQuery):
    _, event_id, choice = callback_query.data.split(":")
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏:\n–°–æ–±—ã—Ç–∏–µ: `{event_id}`\n–í–∞—à –≤—ã–±–æ—Ä: {'–î–∞' if choice == 'yes' else '–ù–µ—Ç'}",
        parse_mode="Markdown"
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith("more:"))
async def more_info(callback_query: types.CallbackQuery):
    event_id = callback_query.data.split(":")[1]
    event = next((e for e in events if e["id"] == event_id), None)
    if event:
        await bot.send_message(
            callback_query.from_user.id,
            f"üìÑ *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Å–æ–±—ã—Ç–∏–∏ {event_id}*\n\n{event['desc']}\n\n_–ü–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–º–Ω–æ–≥–æ, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ!_",
            parse_mode="Markdown"
        )
    await bot.answer_callback_query(callback_query.id)

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

