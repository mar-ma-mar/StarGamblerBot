from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

events = [
    {
        "id": "mars2028",
        "title": "üöÄ –ú–∞—Å–∫ –ø–æ–ª–µ—Ç–∏—Ç –Ω–∞ –ú–∞—Ä—Å –¥–æ 2028 –≥–æ–¥–∞",
        "desc": "–°–¥–µ–ª–∞–µ—Ç –ª–∏ –ò–ª–ª–æ–Ω –ú–∞—Å–∫ –ø–∏–ª–æ—Ç–∏—Ä—É–µ–º—É—é –º–∏—Å—Å–∏—é –Ω–∞ –ú–∞—Ä—Å –¥–æ –∫–æ–Ω—Ü–∞ 2027 –≥–æ–¥–∞?",
    },
    {
        "id": "war2026",
        "title": "üí• –ê–º–µ—Ä–∏–∫–∞ –≤—Å—Ç—É–ø–∏—Ç –≤ –≤–æ–π–Ω—É —Å –ò—Ä–∞–Ω–æ–º –≤ 2026 –≥–æ–¥—É",
        "desc": "–ü—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ª–∏ –≤–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –°–®–ê –∏ –ò—Ä–∞–Ω–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–≤–∞ –≥–æ–¥–∞?",
    },
    {
        "id": "ai2027",
        "title": "ü§ñ –ò–ò –∑–∞—Ö–≤–∞—Ç–∏—Ç –º–∏—Ä –≤ 2027 –≥–æ–¥—É",
        "desc": "–°—Ç–∞–Ω–µ—Ç –ª–∏ –ò–ò –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —Å–∏–ª–æ–π, –∑–∞–º–µ–Ω—è—é—â–µ–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –±–∏–∑–Ω–µ—Å?",
    },
]

# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî —Å–ª–æ–≤–∞—Ä—å –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, —á—Ç–æ —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
user_votes = {}

def build_main_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π", callback_data="show_events"))
    keyboard.add(InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"))
    return keyboard

def build_event_keyboard(event_id, user_id):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
    voted = user_votes.get(user_id, {}).get(event_id)
    if voted:
        text = "‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: " + ("–î–∞" if voted == "yes" else "–ù–µ—Ç")
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text, callback_data="noop"))
        keyboard.add(InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"more:{event_id}"))
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"vote:{event_id}:yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"vote:{event_id}:no"),
        )
        keyboard.add(InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"more:{event_id}"))
    return keyboard

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–°—Ç–∞–≤—å –Ω–∞ –ë—É–¥—É—â–µ–µ*!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—â–µ–≥–æ –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.",
        parse_mode="Markdown",
        reply_markup=build_main_menu()
    )

@dp.callback_query_handler(lambda c: c.data == "show_events")
async def show_events(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    for idx, event in enumerate(events, start=1):
        text = f"*–°–æ–±—ã—Ç–∏–µ {idx} –∏–∑ {len(events)}*\n\n*{event['title']}*\n{event['desc']}"
        keyboard = build_event_keyboard(event["id"], user_id)
        await bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith("vote:"))
async def handle_vote(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    _, event_id, choice = callback_query.data.split(":")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
    user_votes.setdefault(user_id, {})[event_id] = choice
    
    answer = "‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª '–î–∞'" if choice == "yes" else "‚ùå –¢—ã –≤—ã–±—Ä–∞–ª '–ù–µ—Ç'"
    await bot.send_message(user_id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ *{event_id}*!\n{answer}", parse_mode="Markdown")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–µ—Ç–∫–æ–π –æ –≥–æ–ª–æ—Å–µ
    event = next((e for e in events if e["id"] == event_id), None)
    if event:
        keyboard = build_event_keyboard(event_id, user_id)
        text = f"*{event['title']}*\n\n{event['desc']}"
        await bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=keyboard)
    
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith("more:"))
async def more_info(callback_query: types.CallbackQuery):
    event_id = callback_query.data.split(":")[1]
    event = next((e for e in events if e["id"] == event_id), None)
    if event:
        await bot.send_message(callback_query.from_user.id, f"üìÑ *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:*\n\n{event['desc']}\n\n_–ü–æ–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –Ω–µ–º–Ω–æ–≥–æ, —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ!_", parse_mode="Markdown")
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "help")
async def help_handler(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           "‚ÑπÔ∏è *–ü–æ–º–æ—â—å*\n\n"
                           "/s
