import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_balances = {}

@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    if user_id not in user_balances:
        user_balances[user_id] = 1000
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å ‚Äî 1000 –∑–≤—ë–∑–¥.")
    else:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

@dp.message(Command(commands=["balance"]))
async def cmd_balance(message: Message):
    user_id = message.from_user.id
    balance = user_balances.get(user_id, 0)
    await message.answer(f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∑–≤—ë–∑–¥.")

@dp.message(Command(commands=["bet"]))
async def cmd_bet(message: Message):
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bet <—Å—É–º–º–∞>")
        return
    amount = int(args[1])
    balance = user_balances.get(user_id, 0)
    if amount <= 0:
        await message.answer("–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    if balance < amount:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return
    user_balances[user_id] -= amount
    await message.answer(f"–°—Ç–∞–≤–∫–∞ {amount} –∑–≤—ë–∑–¥ –ø—Ä–∏–Ω—è—Ç–∞! –û—Å—Ç–∞—Ç–æ–∫: {user_balances[user_id]} –∑–≤—ë–∑–¥.")

@dp.message(Command(commands=["win"]))
async def cmd_win(message: Message):
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /win <—Å—É–º–º–∞>")
        return
    amount = int(args[1])
    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    user_balances[user_id] = user_balances.get(user_id, 0) + amount
    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–π –≤—ã–∏–≥—Ä—ã—à: {amount} –∑–≤—ë–∑–¥.\n–ë–∞–ª–∞–Ω—Å: {user_balances[user_id]} –∑–≤—ë–∑–¥.")

@dp.message(Command(commands=["transfer"]))
async def cmd_transfer(message: Message):
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) != 3 or not args[2].isdigit() or not args[1].startswith("@"):
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /transfer <@username> <—Å—É–º–º–∞>")
        return
    receiver_username = args[1][1:]
    amount = int(args[2])
    sender_balance = user_balances.get(user_id, 0)
    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    if sender_balance < amount:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    try:
        receiver = await bot.get_chat(receiver_username)
    except Exception:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    receiver_id = receiver.id

    user_balances[user_id] -= amount
    user_balances[receiver_id] = user_balances.get(receiver_id, 0) + amount

    await message.answer(f"–¢—ã –ø–µ—Ä–µ–≤—ë–ª {amount} –∑–≤—ë–∑–¥ @{receiver_username}.\n–ë–∞–ª–∞–Ω—Å: {user_balances[user_id]} –∑–≤—ë–∑–¥.")
    await bot.send_message(receiver_id, f"–¢–µ–±–µ –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –∑–≤—ë–∑–¥ –æ—Ç @{message.from_user.username}!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
