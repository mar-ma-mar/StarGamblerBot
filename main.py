import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
webapp_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton(
        text="üß† –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
        web_app=WebAppInfo(url="https://funny-biscuit-ccf218.netlify.app")
    )
)

# –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
events = [
    {
        "id": "mars2028",
        "title": "üöÄ –ú–∞—Å–∫ –ø–æ–ª–µ—Ç–∏—Ç –Ω–∞ –ú–∞—Ä—Å –¥–æ 2028 –≥–æ–¥–∞",
        "desc": "–°–¥–µ–ª–∞–µ—Ç –ª–∏ –ò–ª–ª–æ–Ω –ú–∞—Å–∫ –ø–∏–ª–æ—Ç–∏—Ä—É–µ–º—É—é –º–∏—Å—Å–∏—é –Ω–∞ –ú–∞—Ä—Å –¥–æ –∫–æ–Ω—Ü–∞ 2027 –≥–æ–¥–∞?",
    },
    {
        "id": "war2026",
        "title": "üí• –ê–º–µ—Ä–∏–∫–∞ –≤—Å—Ç—É–ø–∏—Ç –≤ –≤–æ–π–Ω—É —Å –ò—Ä–∞–Ω–æ–º –≤ 2026 –≥–æ–¥—É",
        "desc": "–ü—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ª–∏ –≤–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –°–®–ê –∏ –ò—Ä–∞–Ω–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–≤–∞ –≥–æ–¥–∞?",
    },
    {
        "id": "ai2027",
        "title": "ü§ñ –ò–ò –∑–∞—Ö–≤–∞—Ç–∏—Ç –º–∏—Ä –≤ 2027 –≥–æ–¥—É",
        "desc": "–°—Ç–∞–Ω–µ—Ç –ª–∏ –ò–ò –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —Å–∏–ª–æ–π, –∑–∞–º–µ–Ω—è—é—â–µ–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –±–∏–∑–Ω–µ—Å?",
    },
]

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–°—Ç–∞–≤—å –Ω–∞ –ë—É–¥—É—â–µ–µ*!\n\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        parse_mode="Markdown",
        reply_markup=webapp_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "show_events")
async def show_events(callback_query: types.CallbackQuery):
    for event in events:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"vote:{event['id']}:yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"vote:{event['id']}:no"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"more:{event['id']}")
        )
        await bot.send_message(callback_query.from_user.id,
                               f"*{event['title']}*\n\n{event['desc']}",
                               parse_mode="Markdown",
                               reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith("vote:"))
async def handle_vote(callback_query: types.CallbackQuery):
    _, event_id, choice = callback_query.data.split(":")
    answer = "‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª '–î–∞'" if choice == "yes" else "‚ùå –¢—ã –≤—ã–±—Ä–∞–ª '–ù–µ—Ç'"
    await bot.send_message(callback_query.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ `{event_id}`!\n{answer}",
                           parse_mode="Markdown")
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith("more:"))
async def more_info(callback_query: types.CallbackQuery):
    event_id = callback_query.data.split(":")[1]
    event = next((e for e in events if e["id"] == event_id), None)
    if event:
        await bot.send_message(callback_query.from_user.id, f"üìÑ *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:*\n\n{event['desc']}",
                               parse_mode="Markdown")
    await bot.answer_callback_query(callback_query.id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
